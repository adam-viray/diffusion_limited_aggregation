#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Not A Diffusion Limited Aggregation model
20 January 2021
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
plt.style.use("fivethirtyeight")

class DLA():
    
    def __init__(self, r=40):
        self.r = r
        self.seed = (r,r)
        self.cluster = [self.seed]
        self.cluster_perimeter = [(self.seed[0]+1,self.seed[1]), \
                                  (self.seed[0]-1,self.seed[1]), \
                                  (self.seed[0],self.seed[1]+1), \
                                  (self.seed[0],self.seed[1]-1)]
        self.start_ring = []
        self.path = []
        self.path_perimeter = []
        self.output_array_cluster = np.zeros((2*r+1,2*r+1))
    
    def dist(self, pt1, pt2):
        """
        calculate and return euclidean distance between two points.
        """
        self.point1 = np.array(pt1)
        self.point2 = np.array(pt2)
        self.distance = np.linalg.norm(self.point1 - self.point2)
        return self.distance
    
    def in_bounds(self, pt):
        """
        checks if point is in bounds
        """
        return (self.dist(pt, self.seed) < self.r + 1)
    
    def density(self):
        """
        calculate and return the density of cluster per available area
        """
        self.rho = len(self.cluster)/(np.pi*self.r**2)
        return self.rho
    
    def build_ring(self, r):
        """
        construct the starting ring from which walkers originate.
        EPSILON represents the allowable error and is tunable.
        """
        EPSILON = 2.2
        for y in range(-r,r):
            for x in range(-r,r):
                if abs(self.dist((x,y), self.seed) - r) < EPSILON:
                    self.start_ring.append((x,y))
                    
    def grow_perimeter(self, pt):
        """
        take a point and add all four nearest neighbors
        that are not out of bounds, in path_perimeter, or in the
        cluster or path.
        """
        nn = [(pt[0]-1,pt[1]), (pt[0]+1,pt[1]), (pt[0],pt[1]-1), (pt[0],pt[1]+1)]
        for p in nn:
            if p not in self.cluster and p not in self.path \
            and self.in_bounds(p):
                self.path_perimeter.append(p)
    
    def merge(self, pt):
        """
        if point is in cluster_perimeter, add path to cluster, 
        add path_perimeter to cluster_perimeter.
        if point is not in cluster_perimeter, do nothing.
        clear path and path_perimeter.
        """
        if pt in self.cluster_perimeter:
           self.cluster.extend(self.path)
           self.cluster_perimeter.extend(self.path_perimeter)
        self.path = []
        self.path_perimeter = []
        for pt in self.cluster:
            self.output_array_cluster[pt[1]][pt[0]] = 1
    
    def step(self, pt):
        """
        take a point, get nearest neighbors, randomly select a
        valid next_point to step to, and return it.
        grow_perimeter around the next_point.
        """
        nn = [(pt[0]-1,pt[1]), (pt[0]+1,pt[1]), (pt[0],pt[1]-1), (pt[0],pt[1]+1)]
        steps = []
        i = 0
        for p in nn:
            if self.in_bounds(p):
                steps.append(p)
                i += 1
        self.next_point = steps[np.random.randint(0,i)]        
        self.grow_perimeter(self.next_point)
        return self.next_point
        
    def walk(self):
        """
        randomly select point from start_ring and add it to path.
        while point has not reached cluster_perimeter or boundary, step.
        when cluster_perimeter or boundary reached, merge.
        """
        p = self.start_ring[np.random.randint(0,len(self.start_ring))]
        self.path.append(p)
        while p not in self.cluster_perimeter\
        and self.in_bounds:
            p = self.step(p)
            self.path.append(p)
        self.merge(p)
        
        
        
    
def animate(i):
    dla.walk()
    im.set_array(dla.output_array_cluster)
    im.autoscale()
    return im,
        
    
def main():
    """
    instantiate DLA, build dla.start_ring, create figure and image,
    animate until ???
    """
    global dla, im
    
    dla = DLA()
    dla.build_ring(dla.r)
    density = dla.density()
    
    fig = plt.figure()
    im = plt.imshow(dla.output_array_cluster, extent=[-dla.r + 10, dla.r + 10, -dla.r + 10, dla.r + 10])
    
    while density < .5:
        anim = FuncAnimation(fig, animate, interval=60, blit=True)
        plt.show()
        density = dla.density()

if __name__ == "__main__":
    main()
